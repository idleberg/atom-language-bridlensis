'.source.nsis.bridle':
  'Abort()':
    body: 'Abort("${1:user_message}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Abort()'
  'BringToFront()':
    body: 'BringToFront()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'BringToFront()'
  'Call()':
    body: 'Call("${1:name}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Call()'
  'CallInstDLL()':
    body: 'CallInstDLL("${1:dll_file}", "${2:function_name}"'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'CallInstDLL()'
  'ClearErrors()':
    body: 'ClearErrors()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ClearErrors()'
  'Copy()':
    body: 'Copy("${1:file}", "${2:target}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Copy()'
  'CreateDirectory()':
    body: 'CreateDirectory("${1:path_to_create}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'CreateDirectory()'
  'CreateFont()':
    body: 'CreateFont("${1:face_name}",${2: "${3:height}"${4:, "${5:weight}"${6:, ${7:/ITALIC}${8:, ${9:/UNDERLINE}${10:, ${11:/STRIKE}}}}}})$12'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'CreateFont()'
  'CreateShortCut()':
    body: 'CreateShortCut("${1:link}.lnk", "${2:target_file}"${3:, "${4:parameters}"${5:, "${6:icon_file}"${7:, ${8:icon_index_number}${9:, ${10:start_options}${11:, ${12:keyboard_shortcut}${13:, "${14:description}"}}}}}}})$15'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'CreateShortCut()'
  'Delete()':
    body: 'Delete("${1:source}"${2:, "${3:rebootok}"})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Delete()'
  'DeleteINISec()':
    body: 'DeleteINISec("${1:ini_filename}", "${2:section_name}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'DeleteINISec()'
  'DeleteINIStr()':
    body: 'DeleteINIStr("${1:ini_filename}", "${2:section_name}", "${3:str_name}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'DeleteINIStr()'
  'DeleteRegKey()':
    body: 'DeleteRegKey("${1:rootkey}", "${2:subkey}"}${3:, "${4:options}"})$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'DeleteRegKey()'
  'DeleteRegValue()':
    body: 'DeleteRegValue("${1:root_key}", "${2:subkey}", "${3:key_name}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'DeleteRegValue()'
  'DetailPrint()':
    body: 'DetailPrint("${1:user_message}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'DetailPrint()'
  'Do Until…Loop':
    body: """
      Do Until ${1:condition}
      \t${4:# your code here}
      Loop$5
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'Do Until…Loop'
  'Do While…Loop':
    body: """
      Do While ${1:condition}
      \t${4:# your code here}
      Loop$5
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'Do While…Loop'
  'EnableWindow()':
    body: 'EnableWindow(${1:hwnd}, ${2:value})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'EnableWindow()'
  'EnumRegKey()':
    body: 'EnumRegKey("${1:root_key}", "${2:subkey}", "${3:index}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'EnumRegKey()'
  'EnumRegValue()':
    body: 'EnumRegValue("${1:root_key}", "${2:subkey}", "${3:index}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'EnumRegValue()'
  'Exch()':
    body: 'Exch(${1:user_var})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Exch()'
  'Exec()':
    body: 'Exec("${1:command}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Exec()'
  'ExecShell()':
    body: 'ExecShell("${1:action}", "${2:command}"${3:, ${4:parameter}})$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ExecShell()'
  'ExecWait()':
    body: 'ExecWait("${1:command}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ExecWait()'
  'ExpandEnvStrings()':
    body: 'ExpandEnvStrings("${1:string}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ExpandEnvStrings()'
  'File()':
    body: 'File("${1:file}"${2:, "${3:options}"${4:, "${5:outpath}"}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'File()'
  'FileClose()':
    body: 'FileClose(${1:handle})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileClose()'
  'FileCopy()':
    body: 'FileCopy("${1:file}", "${2:target}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileCopy()'
  'FileDelete()':
    body: 'FileDelete("${1:source}"${2:, "${3:rebootok}"})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileDelete()'
  'FileOpen()':
    body: 'FileOpen("${1:filename}", ${2:open_mode})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileOpen()'
  'FileRead()':
    body: 'FileRead(${1:handle}, ${2:maxlen})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileRead()'
  'FileReadByte()':
    body: 'FileReadByte(${1:handle}, ${2:maxlen})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileReadByte()'
  'FileReadUTF16LE()':
    body: 'FileReadUTF16LE(${1:handle}, ${2:maxlen})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileReadUTF16LE()'
  'FileReadWord()':
    body: 'FileReadWord(${1:handle}, ${2:maxlen})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileReadWord()'
  'FileRename()':
    body: 'FileRename("${1:source}", "${2:target}"${3:, "${4:options}"}})$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileRename()'
  'FileSeek()':
    body: 'FileSeek(${1:handle}, ${2:offset}${3:, ${4:mode}${5:, ${6:user_var}}})$7'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileSeek()'
  'FileWrite()':
    body: 'FileWrite(${1:handle})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileWrite()'
  'FileWriteByte()':
    body: 'FileWriteByte(${1:handle}, "${2:string}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileWriteByte()'
  'FileWriteUTF16LE()':
    body: 'FileWriteUTF16LE(${1:handle}, "${2:string}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileWriteUTF16LE()'
  'FileWriteWord()':
    body: 'FileWriteWord(${1:handle}, "${2:string}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FileWriteWord()'
  'FindClose()':
    body: 'FindClose(${1:handle})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FindClose()'
  'FindNext()':
    body: 'FindNext(${1:handle})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FindNext()'
  'FindWindow()':
    body: 'FindWindow("${1:windowclass}", "${2:windowtitle}"${3:, ${4:windowparent}${5:, ${6:childafter}}})$7'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FindWindow()'
  'FlushINI()':
    body: 'FlushINI("${1:ini_filename}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'FlushINI()'
  'Function()':
    body: """
      Function ${1:function_name}(${2:parameters})
      \t${5:# your code here}
      FunctionEnd$6
    """
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Function()'
  'GetCurInstType()':
    body: 'GetCurInstType()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetCurInstType()'
  'GetCurrentAddress()':
    body: 'GetCurrentAddress()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetCurrentAddress()'
  'GetDlgItem()':
    body: 'GetDlgItem(${1:dialog}, ${2:item_id})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetDlgItem()'
  'GetErrorLevel()':
    body: 'GetErrorLevel()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetErrorLevel()'
  'GetFullPathName()':
    body: 'GetFullPathName("${1:path}"${2:, "${3:options}"})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetFullPathName()'
  'GetFunctionAddress()':
    body: 'GetCurrentAddress("${1:function_name}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetFunctionAddress()'
  'GetInstDirError()':
    body: 'GetInstDirError()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetInstDirError()'
  'GetLabelAddress()':
    body: 'GetLabelAddress("${1:label}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetLabelAddress()'
  'GetTempFileName()':
    body: 'GetTempFileName(${1:\$${2:base_dir}})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'GetTempFileName()'
  'Goto()':
    body: 'Goto(${1:name})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Goto()'
  'HideWindow()':
    body: 'HideWindow()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'HideWindow()'
  'If Not':
    body: """
      If Not ${1:condition}
      \t${4:# your code here}
      EndIf$5
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'If Not'
  'If Not…Else':
    body: """
      If Not ${1:condition}
      \t${4:# your code here}
      Else
      \t${5:# your code here}
      EndIf$6
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'If Not…Else'
  'If Not…ElseIf':
    body: """
      If Not ${1:condition}
      \t${4:# your code here}
      ElseIf
      \t${5:# your code here}
      EndIf$6
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'If Not…ElseIf'
  'If':
    body: """
      If ${1:condition}
      \t${4:# your code here}
      EndIf$5
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'If'
  'If…Else':
    body: """
      If ${1:condition}
      \t${4:# your code here}
      Else
      \t${5:# your code here}
      EndIf$6
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'If…Else'
  'If…ElseIf':
    body: """
      If ${1:condition}
      \t${4:# your code here}
      ElseIf
      \t${5:# your code here}
      EndIf$6
    """
    leftLabelHTML: "<span class='syntax--support function'>LogicLib.nsh</span>"
    prefix: 'If…ElseIf'
  'InitPluginsDir()':
    body: 'InitPluginsDir()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'InitPluginsDir()'
  'InstTypeGetText()':
    body: 'InstTypeGetText(${1:inst_type_idx})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'InstTypeGetText()'
  'InstTypeSetText()':
    body: 'InstTypeSetText(${1:inst_type_idx}, "${2:text}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'InstTypeSetText()'
  'IntCmp()':
    body: 'IntCmp(${1:val1}, ${2:val2}, ${3:jump_if_equal}${4:, ${5:jump_if_val1_less}${6:, ${7:jump_if_val1_more}}})$8'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'IntCmp()'
  'IntFmt()':
    body: 'IntFmt(${1:format}, ${2:numberstring})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'IntFmt()'
  'IntOp()':
    body: 'IntOp(${1:value1}, ${2:op}, ${3:value2})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'IntOp()'
  'LangString()':
    body: 'LangString(${1:name}, \$\{LANG_${2:language_id}\}, "${3:string}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LangString()'
  'LicenseLangString()':
    body: 'LicenseLangString(${1:name}, \$\{LANG_${2:language_id}\}, "${3:license_path}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LicenseLangString()'
  'LoadLanguageFile()':
    body: 'LoadLanguageFile("${1:language_file_nlf}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LoadLanguageFile()'
  'LockWindow()':
    body: 'LockWindow(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LockWindow()'
  'LockWindow(off)':
    body: 'LockWindow(off)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LockWindow(off)'
  'LockWindow(on)':
    body: 'LockWindow(on)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LockWindow(on)'
  'LogSet()':
    body: 'LogSet(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LogSet()'
  'LogSet(off)':
    body: 'LogSet(off)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LogSet(off)'
  'LogSet(on)':
    body: 'LogSet(on)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LogSet(on)'
  'LogText()':
    body: 'LogText("${1:text}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'LogText()'
  'MsgBox()':
    body: 'MsgBox("${1:buttons}", "${2:message}"${3:, ${4:options}${5:, ${6:sd}}})$7'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox()'
  'MsgBox(ABORTRETRYIGNORE)':
    body: 'MsgBox("ABORTRETRYIGNORE", "${1:message}"${2:, ${3:options}${4:, ${5:sd}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox(ABORTRETRYIGNORE)'
  'MsgBox(OK)':
    body: 'MsgBox("OK", "${1:message}"${2:, ${3:options}${4:, ${5:sd}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox(OK)'
  'MsgBox(OKCANCEL)':
    body: 'MsgBox("OKCANCEL", "${1:message}"${2:, ${3:options}${4:, ${5:sd}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox(OKCANCEL)'
  'MsgBox(RETRYCANCEL)':
    body: 'MsgBox("RETRYCANCEL", "${1:message}"${2:, ${3:options}${4:, ${5:sd}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox(RETRYCANCEL)'
  'MsgBox(YESNO)':
    body: 'MsgBox("YESNO", "${1:message}"${2:, ${3:options}${4:, ${5:sd}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox(YESNO)'
  'MsgBox(YESNOCANCEL)':
    body: 'MsgBox("YESNOCANCEL", "${1:message}"${2:, ${3:options}${4:, ${5:sd}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'MsgBox(YESNOCANCEL)'
  'Pop()':
    body: '${1:user_var} = Pop()$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Pop()'
  'Push()':
    body: 'Push(${1:string})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Push()'
  'Quit()':
    body: 'Quit()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Quit()'
  'ReadEnvStr()':
    body: 'ReadEnvStr(${1:name})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ReadEnvStr()'
  'ReadINIStr()':
    body: 'ReadINIStr("${1:ini_filename}", "${2:section_name}", "${3:entry_name}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ReadINIStr()'
  'ReadRegDWORD()':
    body: 'ReadRegDWORD("${1:root_key}", "${2:sub_key}", "${3:name}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ReadRegDWORD()'
  'ReadRegStr()':
    body: 'ReadRegStr("${1:root_key}", "${2:sub_key}", "${3:name}")$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ReadRegStr()'
  'Reboot()':
    body: 'Reboot()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Reboot()'
  'RegDLL()':
    body: 'RegDLL("${1:file}"${2:, ${3:options}})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'RegDLL()'
  'Rename()':
    body: 'Rename("${1:source}", "${2:target}"${3:, "${4:options}"})$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Rename()'
  'ReserveFile()':
    body: 'ReserveFile("${1:file}"${2:, "${3:options}"})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ReserveFile()'
  'RMDir()':
    body: 'RMDir("${1:directory}"${2:, "${3:options}"})$4'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'RMDir()'
  'SearchPath()':
    body: 'SearchPath("${1:filename}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SearchPath()'
  'SectionGetFlags()':
    body: 'SectionGetFlags(${1:section_index})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionGetFlags()'
  'SectionGetInstTypes()':
    body: 'SectionGetInstTypes(${1:section_index})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionGetInstTypes()'
  'SectionGetSize()':
    body: 'SectionGetSize(${1:section_index})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionGetSize()'
  'SectionSetFlags()':
    body: 'SectionSetFlags(${1:section_index}, ${2:inst_types})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionSetFlags()'
  'SectionSetInstTypes()':
    body: 'SectionSetInstTypes(${1:section_index}, ${2:section_flags})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionSetInstTypes()'
  'SectionSetSize()':
    body: 'SectionSetSize(${1:handle}, ${2:maxlen})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionSetSize()'
  'SectionSetText()':
    body: 'SectionSetText(${1:section_index}, "${2:section_text}")$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SectionSetText()'
  'SendMessage()':
    body: 'SendMessage(${1:hwnd}, ${2:msg}, ${3:wparam}, ${4:lparam}${5:, ${6:timeout_in_ms}})$7'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SendMessage()'
  'SetAutoClose()':
    body: 'SetAutoClose(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetAutoClose()'
  'SetAutoClose(false)':
    body: 'SetAutoClose(false)$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetAutoClose(false)'
  'SetAutoClose(true)':
    body: 'SetAutoClose(true)$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetAutoClose(true)'
  'SetCtlColors()':
    body: 'SetCtlColors(${1:hwnd}${2:, ${3:branding}}, ${4:text_color}, ${5:bg_color})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetCtlColors()'
  'SetCurInstType()':
    body: 'SetCurInstType(${1:inst_type_idx})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetCurInstType()'
  'SetDetailsPrint()':
    body: 'SetDetailsPrint(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsPrint()'
  'SetDetailsPrint(both)':
    body: 'SetDetailsPrint(both)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsPrint(both)'
  'SetDetailsPrint(lastused)':
    body: 'SetDetailsPrint(lastused)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsPrint(lastused)'
  'SetDetailsPrint(listonly)':
    body: 'SetDetailsPrint(listonly)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsPrint(listonly)'
  'SetDetailsPrint(none)':
    body: 'SetDetailsPrint(none)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsPrint(none)'
  'SetDetailsPrint(textonly)':
    body: 'SetDetailsPrint(textonly)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsPrint(textonly)'
  'SetDetailsView()':
    body: 'SetDetailsView(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsView()'
  'SetDetailsView(hide)':
    body: 'SetDetailsView(hide)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsView(hide)'
  'SetDetailsView(show)':
    body: 'SetDetailsView(show)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetDetailsView(show)'
  'SetErrorLevel()':
    body: 'SetErrorLevel(${1:error_level})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetErrorLevel()'
  'SetErrorLevel(0)':
    body: 'SetErrorLevel(0)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetErrorLevel(0)'
  'SetErrorLevel(1)':
    body: 'SetErrorLevel(1)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetErrorLevel(1)'
  'SetErrorLevel(2)':
    body: 'SetErrorLevel(2)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetErrorLevel(2)'
  'SetErrors()':
    body: 'SetErrors()$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetErrors()'
  'SetFileAttributes()':
    body: 'SetFileAttributes("${1:filename}", ${2:attributes})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetFileAttributes()'
  'SetOutPath()':
    body: 'SetOutPath("${1:path}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetOutPath()'
  'SetRebootFlag()':
    body: 'SetRebootFlag(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRebootFlag()'
  'SetRebootFlag(false)':
    body: 'SetRebootFlag(false)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRebootFlag(false)'
  'SetRebootFlag(true)':
    body: 'SetRebootFlag(true)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRebootFlag(true)'
  'SetRegView()':
    body: 'SetRegView(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRegView()'
  'SetRegView(32)':
    body: 'SetRegView(32)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRegView(32)'
  'SetRegView(64)':
    body: 'SetRegView(64)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRegView(64)'
  'SetRegView(lastused)':
    body: 'SetRegView(lastused)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetRegView(lastused)'
  'SetShellVarContext()':
    body: 'SetShellVarContext(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetShellVarContext()'
  'SetShellVarContext(all)':
    body: 'SetShellVarContext(all)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetShellVarContext(all)'
  'SetShellVarContext(current)':
    body: 'SetShellVarContext(current)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetShellVarContext(current)'
  'SetSilent()':
    body: 'SetSilent(${1:value})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetSilent()'
  'SetSilent(normal)':
    body: 'SetSilent(normal)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetSilent(normal)'
  'SetSilent(silent)':
    body: 'SetSilent(silent)$1'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'SetSilent(silent)'
  'ShowWindow()':
    body: 'ShowWindow(${1:hwnd}, ${2:value})$3'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'ShowWindow()'
  'Sleep()':
    body: 'Sleep(${1:sleeptime_in_ms})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Sleep()'
  'StrCmp()':
    body: 'StrCmp(${1:str1}, ${2:str2}, ${3:jump_if_equal}${4:, ${5:jump_if_val1_less}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'StrCmp()'
  'StrCpy()':
    body: 'StrCpy(${1:str}${2:, ${3:maxlen}${4:, ${5:start_offset}}})$6'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'StrCpy()'
  'StrLen()':
    body: 'StrLen(${1:str})$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'StrLen()'
  'UnRegDLL()':
    body: 'UnRegDLL("${1:dllfile}")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'UnRegDLL()'
  'Var':
    body: 'Var ${1:user_vars}$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'Var'
  'WordFind()':
    body: 'WordFind("${1:string}", "${2:options}", "${3:delimiter1}"${4:, "${5:delimiter2}"${6:, "${7:center}"}})$8'
    leftLabelHTML: "<span class='syntax--support function'>WordFunc.nsh</span>"
    prefix: 'WordFind()'
  'WordFindS()':
    body: 'WordFindS("${1:string}", "${2:options}", "${3:delimiter1}"${4:, "${5:delimiter2}"${6:, "${7:center}"}})$8'
    leftLabelHTML: "<span class='syntax--support function'>WordFunc.nsh</span>"
    prefix: 'WordFindS()'
  'WordReplace()':
    leftLabelHTML: "<span class='syntax--support function'>WordFunc.nsh</span>"
    body: 'WordReplace("${1:string}", "${2:word1}", "${3:word2}", "${4:options}")$5'
    prefix: 'WordReplace()'
  'WordReplaceS()':
    body: 'WordReplaceS("${1:string}", "${2:word1}", "${3:word2}", "${4:options}")$5'
    leftLabelHTML: "<span class='syntax--support function'>WordFunc.nsh</span>"
    prefix: 'WordReplaceS()'
  'WriteINIStr()':
    body: 'WriteINIStr("${1:ini_filename}", "${2:section_name}", "${3:entry_name}", "${4:value}")$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'WriteINIStr()'
  'WriteRegBin()':
    body: 'WriteRegBin("${1:root_key}", "${2:subkey}", "${3:key_name}", "${4:value_data}")$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'WriteRegBin()'
  'WriteRegDWORD()':
    body: 'WriteRegDWORD("${1:root_key}", "${2:subkey}", "${3:key_name}", "${4:value}")$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'WriteRegDWORD()'
  'WriteRegExpandStr()':
    body: 'WriteRegExpandStr("${1:root_key}", "${2:subkey}", "${3:key_name}", "${4:value}")$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'WriteRegExpandStr()'
  'WriteRegStr()':
    body: 'WriteRegStr("${1:root_key}", "${2:subkey}", "${3:key_name}", "${4:value}")$5'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'WriteRegStr()'
  'WriteUninstaller()':
    body: 'WriteUninstaller("${1:path}.exe")$2'
    leftLabelHTML: "<span class='syntax--keyword'>K</span>"
    prefix: 'WriteUninstaller()'
